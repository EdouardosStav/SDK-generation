/*
My API

A simple API for testing SDK generation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package techcorpapidev

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message struct for Message
type Message struct {
	// Unique message identifier
	Id int32 `json:"id"`
	// Message content
	Content string `json:"content"`
	// ID of the user who sent the message
	SenderId int32 `json:"sender_id"`
	// ID of the user who will receive the message
	RecipientId int32 `json:"recipient_id"`
	// When the message was sent
	Timestamp time.Time `json:"timestamp"`
}

type _Message Message

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage(id int32, content string, senderId int32, recipientId int32, timestamp time.Time) *Message {
	this := Message{}
	this.Id = id
	this.Content = content
	this.SenderId = senderId
	this.RecipientId = recipientId
	this.Timestamp = timestamp
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetId returns the Id field value
func (o *Message) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Message) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Message) SetId(v int32) {
	o.Id = v
}

// GetContent returns the Content field value
func (o *Message) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Message) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Message) SetContent(v string) {
	o.Content = v
}

// GetSenderId returns the SenderId field value
func (o *Message) GetSenderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SenderId
}

// GetSenderIdOk returns a tuple with the SenderId field value
// and a boolean to check if the value has been set.
func (o *Message) GetSenderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderId, true
}

// SetSenderId sets field value
func (o *Message) SetSenderId(v int32) {
	o.SenderId = v
}

// GetRecipientId returns the RecipientId field value
func (o *Message) GetRecipientId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecipientId
}

// GetRecipientIdOk returns a tuple with the RecipientId field value
// and a boolean to check if the value has been set.
func (o *Message) GetRecipientIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientId, true
}

// SetRecipientId sets field value
func (o *Message) SetRecipientId(v int32) {
	o.RecipientId = v
}

// GetTimestamp returns the Timestamp field value
func (o *Message) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Message) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Message) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["content"] = o.Content
	toSerialize["sender_id"] = o.SenderId
	toSerialize["recipient_id"] = o.RecipientId
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *Message) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"content",
		"sender_id",
		"recipient_id",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessage := _Message{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessage)

	if err != nil {
		return err
	}

	*o = Message(varMessage)

	return err
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


