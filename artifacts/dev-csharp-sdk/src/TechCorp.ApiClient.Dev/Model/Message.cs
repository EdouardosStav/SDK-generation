// <auto-generated>
/*
 * My API
 *
 * A simple API for testing SDK generation
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TechCorp.ApiClient.Dev.Client;

namespace TechCorp.ApiClient.Dev.Model
{
    /// <summary>
    /// Message
    /// </summary>
    public partial class Message : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="id">Unique message identifier</param>
        /// <param name="content">Message content</param>
        /// <param name="senderId">ID of the user who sent the message</param>
        /// <param name="recipientId">ID of the user who will receive the message</param>
        /// <param name="timestamp">When the message was sent</param>
        [JsonConstructor]
        public Message(int id, string content, int senderId, int recipientId, DateTime timestamp)
        {
            Id = id;
            Content = content;
            SenderId = senderId;
            RecipientId = recipientId;
            Timestamp = timestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique message identifier
        /// </summary>
        /// <value>Unique message identifier</value>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Message content
        /// </summary>
        /// <value>Message content</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// ID of the user who sent the message
        /// </summary>
        /// <value>ID of the user who sent the message</value>
        [JsonPropertyName("sender_id")]
        public int SenderId { get; set; }

        /// <summary>
        /// ID of the user who will receive the message
        /// </summary>
        /// <value>ID of the user who will receive the message</value>
        [JsonPropertyName("recipient_id")]
        public int RecipientId { get; set; }

        /// <summary>
        /// When the message was sent
        /// </summary>
        /// <value>When the message was sent</value>
        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Message" />
    /// </summary>
    public class MessageJsonConverter : JsonConverter<Message>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Message" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Message Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> content = default;
            Option<int?> senderId = default;
            Option<int?> recipientId = default;
            Option<DateTime?> timestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sender_id":
                            senderId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recipient_id":
                            recipientId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(id));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(content));

            if (!senderId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(senderId));

            if (!recipientId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(recipientId));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(timestamp));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Message.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class Message.");

            if (senderId.IsSet && senderId.Value == null)
                throw new ArgumentNullException(nameof(senderId), "Property is not nullable for class Message.");

            if (recipientId.IsSet && recipientId.Value == null)
                throw new ArgumentNullException(nameof(recipientId), "Property is not nullable for class Message.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class Message.");

            return new Message(id.Value!.Value!, content.Value!, senderId.Value!.Value!, recipientId.Value!.Value!, timestamp.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, message, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            if (message.Content == null)
                throw new ArgumentNullException(nameof(message.Content), "Property is required for class Message.");

            writer.WriteNumber("id", message.Id);

            writer.WriteString("content", message.Content);

            writer.WriteNumber("sender_id", message.SenderId);

            writer.WriteNumber("recipient_id", message.RecipientId);

            writer.WriteString("timestamp", message.Timestamp.ToString(TimestampFormat));
        }
    }
}
