/*
My API

A simple API for testing SDK generation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package techcorpapiprod

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendMessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMessageRequest{}

// SendMessageRequest struct for SendMessageRequest
type SendMessageRequest struct {
	// Message content
	Content string `json:"content"`
	// ID of the user who will receive the message
	RecipientId int32 `json:"recipient_id"`
}

type _SendMessageRequest SendMessageRequest

// NewSendMessageRequest instantiates a new SendMessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMessageRequest(content string, recipientId int32) *SendMessageRequest {
	this := SendMessageRequest{}
	this.Content = content
	this.RecipientId = recipientId
	return &this
}

// NewSendMessageRequestWithDefaults instantiates a new SendMessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMessageRequestWithDefaults() *SendMessageRequest {
	this := SendMessageRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *SendMessageRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *SendMessageRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *SendMessageRequest) SetContent(v string) {
	o.Content = v
}

// GetRecipientId returns the RecipientId field value
func (o *SendMessageRequest) GetRecipientId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecipientId
}

// GetRecipientIdOk returns a tuple with the RecipientId field value
// and a boolean to check if the value has been set.
func (o *SendMessageRequest) GetRecipientIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientId, true
}

// SetRecipientId sets field value
func (o *SendMessageRequest) SetRecipientId(v int32) {
	o.RecipientId = v
}

func (o SendMessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["recipient_id"] = o.RecipientId
	return toSerialize, nil
}

func (o *SendMessageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"recipient_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendMessageRequest := _SendMessageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendMessageRequest)

	if err != nil {
		return err
	}

	*o = SendMessageRequest(varSendMessageRequest)

	return err
}

type NullableSendMessageRequest struct {
	value *SendMessageRequest
	isSet bool
}

func (v NullableSendMessageRequest) Get() *SendMessageRequest {
	return v.value
}

func (v *NullableSendMessageRequest) Set(val *SendMessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMessageRequest(val *SendMessageRequest) *NullableSendMessageRequest {
	return &NullableSendMessageRequest{value: val, isSet: true}
}

func (v NullableSendMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


