/**
 * My API
 * A simple API for testing SDK generation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Message model module.
 * @module model/Message
 * @version 2.0.0-rc.20250709.1217
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * @alias module:model/Message
     * @param id {Number} Unique message identifier
     * @param content {String} Message content
     * @param senderId {Number} ID of the user who sent the message
     * @param recipientId {Number} ID of the user who will receive the message
     * @param timestamp {Date} When the message was sent
     */
    constructor(id, content, senderId, recipientId, timestamp) { 
        
        Message.initialize(this, id, content, senderId, recipientId, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, content, senderId, recipientId, timestamp) { 
        obj['id'] = id;
        obj['content'] = content;
        obj['sender_id'] = senderId;
        obj['recipient_id'] = recipientId;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('sender_id')) {
                obj['sender_id'] = ApiClient.convertToType(data['sender_id'], 'Number');
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Message.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }

        return true;
    }


}

Message.RequiredProperties = ["id", "content", "sender_id", "recipient_id", "timestamp"];

/**
 * Unique message identifier
 * @member {Number} id
 */
Message.prototype['id'] = undefined;

/**
 * Message content
 * @member {String} content
 */
Message.prototype['content'] = undefined;

/**
 * ID of the user who sent the message
 * @member {Number} sender_id
 */
Message.prototype['sender_id'] = undefined;

/**
 * ID of the user who will receive the message
 * @member {Number} recipient_id
 */
Message.prototype['recipient_id'] = undefined;

/**
 * When the message was sent
 * @member {Date} timestamp
 */
Message.prototype['timestamp'] = undefined;






export default Message;

